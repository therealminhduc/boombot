name: Deploy Website

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json
      
      - name: Install dependencies
        working-directory: web
        run: npm ci
      
      - name: Build frontend
        working-directory: web
        env:
          VITE_API_URL: https://boombot.dev/api
        run: npm run build
      
      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: web/dist

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
      
      - name: Build backend
        run: cargo build --release --package back
      
      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: target/release/back

  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
      
      - name: Create directories
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            mkdir -p /home/ubuntu/boombot/{web-frontend,web-backend,data}
          "
      
      - name: Deploy frontend files
        run: |
          scp -o StrictHostKeyChecking=no -r artifacts/frontend-build/* ubuntu@${{ secrets.VPS_IP }}:/home/ubuntu/boombot/web-frontend/
      
      - name: Deploy backend binary
        run: |
          scp -o StrictHostKeyChecking=no artifacts/backend-binary/back ubuntu@${{ secrets.VPS_IP }}:/home/ubuntu/boombot/web-backend/
      
      - name: Install dependencies
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            # Install Node.js dependencies
            which pm2 || npm install -g pm2
            which serve || npm install -g serve
            
            # Install SSL certificate tools
            which certbot || (sudo apt update && sudo apt install -y certbot python3-certbot-nginx)
          "
      
      - name: Setup backend service
        env:
          ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          DATABASE_PATH: "/home/ubuntu/boombot/data/rules.db"
        run: |
          # Copy template and substitute variables
          cp .github/templates/systemd-backend.service /tmp/boombot-backend.service
          sed -i "s/{{ADMIN_USERNAME}}/${ADMIN_USERNAME}/g" /tmp/boombot-backend.service
          sed -i "s/{{ADMIN_PASSWORD}}/${ADMIN_PASSWORD}/g" /tmp/boombot-backend.service
          sed -i "s|{{DATABASE_PATH}}|${DATABASE_PATH}|g" /tmp/boombot-backend.service
          
          # Deploy the service file
          scp -o StrictHostKeyChecking=no /tmp/boombot-backend.service ubuntu@${{ secrets.VPS_IP }}:/tmp/
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            sudo mv /tmp/boombot-backend.service /etc/systemd/system/
          "
      
      - name: Setup Nginx configuration
        run: |
          # Deploy the Nginx configuration template
          scp -o StrictHostKeyChecking=no .github/templates/nginx-boombot.conf ubuntu@${{ secrets.VPS_IP }}:/tmp/
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            sudo mv /tmp/nginx-boombot.conf /etc/nginx/sites-available/boombot
          "
      
      - name: Configure Nginx sites
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            # Enable boombot site
            sudo ln -sf /etc/nginx/sites-available/boombot /etc/nginx/sites-enabled/
            
            # Remove default site
            sudo rm -f /etc/nginx/sites-enabled/default
            
            # Test Nginx configuration
            sudo nginx -t
          "
      
      - name: Setup and start backend service
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            # Make backend executable
            chmod +x /home/ubuntu/boombot/web-backend/back
            
            # Enable and start backend service
            sudo systemctl enable boombot-backend
            sudo systemctl daemon-reload
            sudo systemctl restart boombot-backend
            
            # Check if service started successfully
            sudo systemctl is-active boombot-backend
          "
      
      - name: Setup and start frontend service
        run: |
          # Deploy the frontend startup script
          scp -o StrictHostKeyChecking=no .github/templates/start-frontend.sh ubuntu@${{ secrets.VPS_IP }}:/tmp/
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            chmod +x /tmp/start-frontend.sh
            /tmp/start-frontend.sh
          "
      
      - name: Restart Nginx
        run: |
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            sudo systemctl restart nginx
            sudo systemctl status nginx --no-pager
          "
      
      - name: Verify deployment
        run: |
          # Wait for services to fully start
          sleep 10
          
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.VPS_IP }} "
            echo 'Testing backend health...'
            curl -f http://localhost:8000/health || (echo 'Backend health check failed' && exit 1)
            
            echo 'Testing frontend...'
            curl -f http://localhost:3000 || (echo 'Frontend check failed' && exit 1)
            
            echo 'Checking service statuses...'
            sudo systemctl is-active boombot-backend || (echo 'Backend service not active' && exit 1)
            pm2 list | grep boombot-frontend | grep online || (echo 'Frontend service not online' && exit 1)
            
            echo 'All services are running successfully!'
          "

      - name: Purge Cloudflare Cache
        uses: jakejarvis/cloudflare-purge-action@master
        env:
          CLOUDFLARE_ZONE: ${{ secrets.CLOUDFLARE_ZONE }}
          CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }} 